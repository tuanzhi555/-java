
# ---------------- 基础配置 ----------------
user  nginx;                       # 指定 Nginx 运行的用户（容器里一般就是 nginx）
worker_processes  auto;            # 自动根据 CPU 核心数启动 worker 进程，提升并发性能

events {
  worker_connections 1024;         # 每个 worker 允许同时打开的最大连接数（1024 个）
}

http {
  include       /etc/nginx/mime.types;   # 引入 MIME 类型映射表（比如 .html、.css、.js）
  default_type  application/octet-stream;# 默认 MIME 类型（二进制流）

  sendfile      on;                # 开启高效文件传输模式（零拷贝）
  tcp_nopush    on;                # 优化 TCP 数据包传输，减少网络开销
  keepalive_timeout  65;           # 长连接保持时间 65 秒，提升用户体验

  # ---------------- 压缩配置 ----------------
  gzip on;                         # 开启 gzip 压缩
  gzip_types text/plain application/javascript application/json text/css text/xml image/svg+xml;
                                   # 指定对哪些类型文件启用压缩，减小传输体积

  # ---------------- 虚拟主机配置 ----------------
  server {
    listen 80;                     # 监听 80 端口（HTTP 默认端口）
    server_name  _;                # 匹配所有域名（“_” 表示兜底规则）

    root /usr/share/nginx/html;    # 网站根目录（前端构建好的 dist/ 会复制到这里）
    index index.html;              # 默认首页文件

    # 1) 前端路由：处理 SPA 刷新/跳转 404 问题
    location / {
      try_files $uri $uri/ /index.html;
      # 含义：
      #   先检查请求的 URI 是否有对应的静态文件 ($uri)
      #   再检查是否是目录 ($uri/)
      #   如果都没有，就回退到 index.html（前端路由交给 Vue/React 处理）
      #
      # 举例：
      #   http://site/user/list -> 没有 user/list 文件
      #   Nginx 回退 index.html -> Vue Router 负责渲染对应页面
    }

    # 2) 静态资源缓存：为 js/css/img 等文件设置缓存
    location ~* \.(?:js|css|png|jpg|jpeg|gif|svg|ico|woff2?)$ {
      expires 30d;                  # 设置缓存时间 30 天，减少重复请求
      access_log off;               # 静态资源不写 access 日志，减少磁盘 IO
      try_files $uri =404;          # 确保文件存在，否则返回 404
    }

    # 3) index.html 不缓存：避免发布新版本后还看到旧页面
    location = /index.html {
      add_header Cache-Control "no-cache, no-store, must-revalidate";
      # no-cache: 强制客户端向服务器验证缓存
      # no-store: 不允许缓存任何响应
      # must-revalidate: 缓存过期必须重新请求服务器
    }

    # 4) 健康检查接口（可选）
    location = /healthz {
      return 200 'ok';              # 返回 HTTP 200 状态码，内容是 "ok"
      add_header Content-Type text/plain;
      # 用于 K8s readinessProbe/livenessProbe 健康检查
      # 比如 Deployment 配置里探测路径 /healthz
    }
  }
}

